/*
   * Flattens a rule set into valid CSS
   * Hashes it, wraps the whole chunk in a .hash1234 {}
   * Returns the hash to be injected on render()
   * */

/*
  MIT License http://www.opensource.org/licenses/mit-license.php
  Author Tobias Koppers @sokra
*/

/*
 * This is a dummy function to check if the function name has been altered by minification.
 * If the function has been minified and NODE_ENV !== 'production', warn the user.
 */

/*
 ComponentStyle is all the CSS-specific stuff, not
 the React-specific stuff.
 */

/*
 Modernizr 3.0.0pre (Custom Build) | MIT
*/

/*
object-assign
(c) Sindre Sorhus
@license MIT
*/

/* 0 */

/* 1 */

/* 10 */

/* 11 */

/* 12 */

/* 13 */

/* 14 */

/* 15 */

/* 16 */

/* 17 */

/* 18 */

/* 19 */

/* 2 */

/* 20 */

/* 21 */

/* 22 */

/* 23 */

/* 24 */

/* 25 */

/* 26 */

/* 27 */

/* 28 */

/* 29 */

/* 3 */

/* 30 */

/* 31 */

/* 32 */

/* 33 */

/* 34 */

/* 35 */

/* 36 */

/* 37 */

/* 38 */

/* 39 */

/* 4 */

/* 40 */

/* 41 */

/* 42 */

/* 43 */

/* 44 */

/* 45 */

/* 46 */

/* 47 */

/* 48 */

/* 49 */

/* 5 */

/* 50 */

/* 51 */

/* 52 */

/* 53 */

/* 54 */

/* 55 */

/* 56 */

/* 57 */

/* 58 */

/* 59 */

/* 6 */

/* 60 */

/* 61 */

/* 62 */

/* 63 */

/* 64 */

/* 65 */

/* 66 */

/* 67 */

/* 68 */

/* 69 */

/* 7 */

/* 70 */

/* 71 */

/* 72 */

/* 73 */

/* 74 */

/* 75 */

/* 76 */

/* 77 */

/* 78 */

/* 79 */

/* 8 */

/* 80 */

/* 81 */

/* 82 */

/* 83 */

/* 84 */

/* 85 */

/* 86 */

/* 87 */

/* 88 */

/* 89 */

/* 9 */

/* 90 */

/* 91 */

/* 92 */

/* 93 */

/* 94 */

/* @import rules are reordered to appear first */

/* Append to target when no previous element was passed */

/* Either execute or defer the function */

/* Firefox quirk requires us to step through all stylesheets to find one owned by the given tag */

/* Handle objects */

/* Handle other components */

/* If config methods are called, wrap up a new template function and merge options */

/* Insert new style tag after the previous one */

/* Modify/inject new props at runtime */

/* NOTE: This is just for backwards-compatibility with jest-styled-components */

/* Remove sealed StyleSheets from the master sheet */

/* The master sheet might be reset, so keep a reference here */

/* These are helpers for the StyleTags to keep track of the injected
 * rule names for each (component) ID that they're keeping track of.
 * They're crucial for detecting whether a name has already been
 * injected.
 * (This excludes rehydrated names) */

/* This is callable directly as a template function */

/* This is the "capacity" of our alphabet i.e. 2x26 for all letters plus their capitalised
 * counterparts */

/* WEBPACK VAR INJECTION */

/* We depend on components having unique IDs */

/* Work around insertRule quirk in EdgeHTML */

/* Z+1 */

/* a list of tags belonging to this StyleSheet */

/* a map from ids to tags */

/* a tag for import rules */

/* abort early if cssRule string is falsy */

/* abort rehydration if no previous style tags were found */

/* abort rehydration if nothing was extracted */

/* add all extracted components to the new tag */

/* add deferred rules for component */

/* add rehydrated name to sheet to avoid re-adding styles */

/* add to clone array */

/* add up no of injected rules */

/* adds "children" to the StyleSheet that inherit all of the parents' rules
   * while their own rules do not affect the parent */

/* adds a new ID:name pairing to a names dictionary */

/* any error indicates an invalid rule */

/* binding */

/* caching layer checking id+name to already have a corresponding tag and injected rules */

/* check if style tag is a streamed tag */

/* children (aka clones) of this StyleSheet inheriting all and future injections */

/* clone all tags */

/* clone other maps */

/* combines hashStr (murmurhash) and nameGenerator for convenience */

/* create a tag to be used for rehydration */

/* create new empty text node and replace the current one */

/* current capacity until a new tag must be created */

/* deferred rules for a given id */

/* delete possible deferred rules */

/* don't inject when the id is already registered */

/* eslint-disable camelcase, no-undef */

/* eslint-disable guard-for-in */

/* eslint-disable import/no-unresolved */

/* eslint-disable no-bitwise */

/* eslint-disable no-unused-vars */

/* eslint-disable react/prop-types, flowtype-errors/show-errors */

/* eslint-disable-next-line jsx-a11y/anchor-has-content */

/* eslint-enable */

/* exception for rehydrated names which are checked separately */

/* extract all components and their CSS */

/* fail silently */

/* force StyleSheet to create a new tag on the next injection */

/* get a char and divide by alphabet-length */

/* get a tag for a given componentId, assign the componentId to one, or shard */

/* global __REACT_DEVTOOLS_GLOBAL_HOOK__ */

/* harmony default export */

/* harmony export (binding) */

/* harmony import */

/* ignore possible rehydrated names */

/* import() */

/* in speedy mode we can keep a lot more rules in a sheet before a slowdown can be expected */

/* injects rules for a given id with a name that will need to be cached */

/* input a number, usually a hash and convert it to base-52 */

/* isRoot */

/* istanbul ignore if  */

/* istanbul ignore next  */

/* mainly for createGlobalStyle to check for its id */

/* n */

/* o */

/* reconstruct tagMap */

/* reexport */

/* registers a componentId and registers it on its tag */

/* rehydrate all SSR'd style tags */

/* remove all rules from the tag */

/* remove old HTMLStyleElements, since they have been rehydrated */

/* removes all rules for a given id, which doesn't remove its marker but resets it */

/* reset capacity and adjust MAX_SIZE by the initial size of the rehydration */

/* reset the internal "master" instance */

/* retrieve a "master" instance of StyleSheet which is typically used when no other is available
   * The master StyleSheet is targeted by createGlobalStyle, keyframes, and components outside of any
    * StyleSheetManager's context */

/* retrieve all component ids */

/* retrieve all component names */

/* shard (create a new tag) if the tag is exhausted (See MAX_SIZE) */

/* simply return a tag, when the componentId was already assigned one */

/* start at 75 for 'a' until 'z' (25) and then start at 65 for capitalised letters */

/* store original HTMLStyleElement */

/* this is used for not reinjecting rules via hasNameForId() */

/* unused harmony export BrowserRouter */

/* unused harmony export H */

/* unused harmony export I */

/* unused harmony export MemoryRouter */

/* unused harmony export NavLink */

/* unused harmony export Prompt */

/* unused harmony export Redirect */

/* unused harmony export ServerStyleSheet */

/* unused harmony export StaticRouter */

/* unused harmony export StyleSheetConsumer */

/* unused harmony export StyleSheetContext */

/* unused harmony export StyleSheetManager */

/* unused harmony export ThemeConsumer */

/* unused harmony export ThemeContext */

/* unused harmony export __DO_NOT_USE_OR_YOU_WILL_BE_HAUNTED_BY_SPOOKY_GHOSTS */

/* unused harmony export __HistoryContext */

/* unused harmony export buffer */

/* unused harmony export generatePath */

/* unused harmony export isStyledComponent */

/* unused harmony export iterable */

/* unused harmony export keyframes */

/* unused harmony export number */

/* unused harmony export observable */

/* unused harmony export sagaAction */

/* unused harmony export task */

/* unused harmony export useHistory */

/* unused harmony export useLocation */

/* unused harmony export useParams */

/* unused harmony export useRouteMatch */

/* unused harmony export w */

/* unused harmony export withRouter */

/* unused harmony export withTheme */

/* unused harmony export x */

/* use insertRule and cap passed index with maxIndex (no of cssRules) */

/* we should always be able to find a tag */

/* when rules for an id are removed using remove() we have to ignore rehydratedNames for it */

/*! *****************************************************************************
Copyright (c) Microsoft Corporation. All rights reserved.
Licensed under the Apache License, Version 2.0 (the "License"); you may not use
this file except in compliance with the License. You may obtain a copy of the
License at http://www.apache.org/licenses/LICENSE-2.0

THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
MERCHANTABLITY OR NON-INFRINGEMENT.

See the Apache Version 2.0 License for specific language governing permissions
and limitations under the License.
***************************************************************************** */

/*#__PURE__*/

/**
          Cancels the current effect; this will propagate the cancellation down to any called tasks
        **/

/**
          If this Generator has a `return` method then invokes it
          This will jump to the finally block
        **/

/**
          This Generator has ended, terminate the main task and notify the fork queue
        **/

/**
          getting TASK_CANCEL automatically cancels the main task
          We can get this value here
           - By cancelling the parent task manually
          - By joining a Cancelled task
        **/

/**
       * Depending on the order "render" is called this can cause the styles to be lost
       * until the next render pass of the remaining instance, which may
       * not be immediate.
       */

/**
       * The minimal observable subscription method.
       * @param {Object} observer Any object that can be used as an observer.
       * The observer object should have a `next` method.
       * @returns {subscription} An object with an `unsubscribe` method that can
       * be used to unsubscribe the observable from the store, and prevent further
       * emission of values from the observable.
       */

/**
       * This fixes HMR compatibility. Don't ask me why, but this combination of
       * caching the closure variables via statics and then persisting the statics in
       * state works across HMR where no other combination did. ¯\_(ツ)_/¯
       */

/**
      each effect runner must attach its own logic of cancellation to the provided callback
      it allows this generator to propagate cancellation downward.
       ATTENTION! effect runners must setup the cancel logic by setting cb.cancel = [cancelMethod]
      And the setup must occur before calling the callback
       This is a sort of inversion of control: called async functions are responsible
      of completing the flow by calling the provided continuation; while caller functions
      are responsible for aborting the current flow by calling the attached cancel function
       Library users can attach their own cancellation logic to promises by defining a
      promise[CANCEL] method in their returned promises
      ATTENTION! calling cancel must have no effect on an already completed or cancelled effect
    **/

/**
    Tracks the current effect cancellation
    Each time the generator progresses. calling runEffect will set a new value
    on it. It allows propagating cancellation to child effects
  **/

/**
    attaches cancellation logic to this task's continuation
    this will permit cancellation to propagate down the call chain
  **/

/**
    cancellation of the main task. We'll simply resume the Generator with a TASK_CANCEL
  **/

/**
   * @return {null}
   */

/**
   * Adds a change listener. It will be called any time an action is dispatched,
   * and some part of the state tree may potentially have changed. You may then
   * call `getState()` to read the current state tree inside the callback.
   *
   * You may call `dispatch()` from a change listener, with the following
   * caveats:
   *
   * 1. The subscriptions are snapshotted just before every `dispatch()` call.
   * If you subscribe or unsubscribe while the listeners are being invoked, this
   * will not have any effect on the `dispatch()` that is currently in progress.
   * However, the next `dispatch()` call, whether nested or not, will use a more
   * recent snapshot of the subscription list.
   *
   * 2. The listener should not expect to see all state changes, as the state
   * might have been updated multiple times during a nested `dispatch()` before
   * the listener is called. It is, however, guaranteed that all subscribers
   * registered before the `dispatch()` started will be called with the latest
   * state by the time it exits.
   *
   * @param {Function} listener A callback to be invoked on every dispatch.
   * @returns {Function} A function to remove this change listener.
   */

/**
   * Dispatches an action. It is the only way to trigger a state change.
   *
   * The `reducer` function, used to create the store, will be called with the
   * current state tree and the given `action`. Its return value will
   * be considered the **next** state of the tree, and the change listeners
   * will be notified.
   *
   * The base implementation only supports plain object actions. If you want to
   * dispatch a Promise, an Observable, a thunk, or something else, you need to
   * wrap your store creating function into the corresponding middleware. For
   * example, see the documentation for the `redux-thunk` package. Even the
   * middleware will eventually dispatch plain object actions using this method.
   *
   * @param {Object} action A plain object representing “what changed”. It is
   * a good idea to keep actions serializable so you can record and replay user
   * sessions, or use the time travelling `redux-devtools`. An action must have
   * a `type` property which may not be `undefined`. It is a good idea to use
   * string constants for action types.
   *
   * @returns {Object} For convenience, the same action object you dispatched.
   *
   * Note that, if you use a custom middleware, it may wrap `dispatch()` to
   * return something else (for example, a Promise you can await).
   */

/**
   * Get the theme from the props, supporting both (outerTheme) => {}
   * as well as object notation
   */

/**
   * Interoperability point for observable/reactive libraries.
   * @returns {observable} A minimal observable of state changes.
   * For more information, see the observable proposal:
   * https://github.com/tc39/proposal-observable
   */

/**
   * Mark the ServerStyleSheet as being fully emitted and manually GC it from the
   * StyleSheet singleton.
   */

/**
   * Reads the state tree managed by the store.
   *
   * @returns {any} The current state tree of your application.
   */

/**
   * Replaces the reducer currently used by the store to calculate the state.
   *
   * You might need this if your app implements code splitting and you want to
   * load some of the reducers dynamically. You might also need this if you
   * implement a hot reloading mechanism for Redux.
   *
   * @param {Function} nextReducer The reducer for the store to use instead.
   * @returns {void}
   */

/**
   * This ensures uniqueness if two components happen to share
   * the same displayName.
   */

/**
   * This is the generator driver
   * It's a recursive async/continuation function which calls itself
   * until the generator terminates or throws
   * @param {internal commands(TASK_CANCEL | TERMINATE) | any} arg - value, generator will be resumed with.
   * @param {boolean} isErr - the flag shows if effect finished with an error
   *
   * receives either (command | effect result, false) or (any thrown thing, true)
   */

/**
   * This makes a shallow copy of currentListeners so we can use
   * nextListeners as a temporary list while dispatching.
   *
   * This prevents any bugs around consumers calling
   * subscribe/unsubscribe in the middle of a dispatch.
   */

/**
   Creates a new task descriptor for this generator.
   A task is the aggregation of it's mainTask and all it's forked tasks.
   **/

/**
   Schedule the put in case another saga is holding a lock.
   The put will be executed atomically. ie nested puts will execute after
   this put has terminated.
   **/

/**
   This may be called by a parent generator to trigger/propagate cancellation
   cancel all pending tasks (including the main task), then end the current task.
    Cancellation propagates down to the whole execution tree held by this Parent task
   It's also propagated to all joiners of this task and their execution tree/joiners
    Cancellation is noop for terminated/Cancelled tasks tasks
   **/

/**
  Executes a task 'atomically'. Tasks scheduled during this execution will be queued
  and flushed after this task has finished (assuming the scheduler endup in a released
  state).
**/

/**
  Executes or queues a task depending on the state of the scheduler (`suspended` or `released`)
**/

/**
  Puts the scheduler in a `released` state.
**/

/**
  Puts the scheduler in a `suspended` state. Scheduled tasks will be queued until the
  scheduler is released.
**/

/**
  Releases the current lock. Executes all queued tasks if the scheduler is in the released state.
**/

/**
  channel(pattern, [buffer])    => creates a proxy channel for store actions
**/

/**
 * @param {any} obj The object to inspect.
 * @returns {boolean} True if the argument appears to be a plain object.
 */

/**
 * A <Link> wrapper that knows if it's "active" or not.
 */

/**
 * A hook to access the redux `dispatch` function.
 *
 * @returns {any|function} redux store's `dispatch` function
 *
 * @example
 *
 * import React, { useCallback } from 'react'
 * import { useDispatch } from 'react-redux'
 *
 * export const CounterComponent = ({ value }) => {
 *   const dispatch = useDispatch()
 *   const increaseCounter = useCallback(() => dispatch({ type: 'increase-counter' }), [])
 *   return (
 *     <div>
 *       <span>{value}</span>
 *       <button onClick={increaseCounter}>Increase counter</button>
 *     </div>
 *   )
 * }
 */

/**
 * A hook to access the redux store's state. This hook takes a selector function
 * as an argument. The selector is called with the store state.
 *
 * This hook takes an optional equality comparison function as the second parameter
 * that allows you to customize the way the selected state is compared to determine
 * whether the component needs to be re-rendered.
 *
 * @param {Function} selector the selector function
 * @param {Function=} equalityFn the function that will be used to determine equality
 *
 * @returns {any} the selected state
 *
 * @example
 *
 * import React from 'react'
 * import { useSelector } from 'react-redux'
 *
 * export const CounterComponent = () => {
 *   const counter = useSelector(state => state.counter)
 *   return <div>{counter}</div>
 * }
 */

/**
 * A hook to access the value of the `ReactReduxContext`. This is a low-level
 * hook that you should usually not need to call directly.
 *
 * @returns {any} the value of the `ReactReduxContext`
 *
 * @example
 *
 * import React from 'react'
 * import { useReduxContext } from 'react-redux'
 *
 * export const CounterComponent = ({ value }) => {
 *   const { store } = useReduxContext()
 *   return <div>{store.getState()}</div>
 * }
 */

/**
 * Adapted from React: https://github.com/facebook/react/blob/master/packages/shared/formatProdErrorMessage.js
 *
 * Do not require this module directly! Use normal throw error calls. These messages will be replaced with error codes
 * during build.
 * @param {number} code
 */

/**
 * Attach the keys as a property of the regexp.
 *
 * @param  {!RegExp} re
 * @param  {Array}   keys
 * @return {!RegExp}
 */

/**
 * Compile a string to a template function for the path.
 *
 * @param  {string}             str
 * @param  {Object=}            options
 * @return {!function(Object=, Object=)}
 */

/**
 * Composes single-argument functions from right to left. The rightmost
 * function can take multiple arguments as it provides the signature for
 * the resulting composite function.
 *
 * @param {...Function} funcs The functions to compose.
 * @returns {Function} A function obtained by composing the argument functions
 * from right to left. For example, compose(f, g, h) is identical to doing
 * (...args) => f(g(h(...args))).
 */

/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

/**
 * Copyright (c) 2014-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

/**
 * Copyright 2015, Yahoo! Inc.
 * Copyrights licensed under the New BSD License. See the accompanying LICENSE file for terms.
 */

/**
 * Create a path regexp from string input.
 *
 * @param  {string}  path
 * @param  {!Array}  keys
 * @param  {!Object} options
 * @return {!RegExp}
 */

/**
 * Create an error file out of errors.md for development and a simple web link to the full errors
 * in production mode.
 */

/**
 * Creates a Redux store that holds the state tree.
 * The only way to change the data in the store is to call `dispatch()` on it.
 *
 * There should only be a single store in your app. To specify how different
 * parts of the state tree respond to actions, you may combine several reducers
 * into a single reducer function by using `combineReducers`.
 *
 * @param {Function} reducer A function that returns the next state tree, given
 * the current state tree and the action to handle.
 *
 * @param {any} [preloadedState] The initial state. You may optionally specify it
 * to hydrate the state from the server in universal apps, or to restore a
 * previously serialized user session.
 * If you use `combineReducers` to produce the root reducer function, this must be
 * an object with the same shape as `combineReducers` keys.
 *
 * @param {Function} [enhancer] The store enhancer. You may optionally specify it
 * to enhance the store with third-party capabilities such as middleware,
 * time travel, persistence, etc. The only store enhancer that ships with Redux
 * is `applyMiddleware()`.
 *
 * @returns {Store} A Redux store that lets you read the state, dispatch actions
 * and subscribe to changes.
 */

/**
 * Creates a history object that stores locations in memory.
 */

/**
 * Creates a history object that uses the HTML5 history API including
 * pushState, replaceState, and the popstate event.
 */

/**
 * Creates a store enhancer that applies middleware to the dispatch method
 * of the Redux store. This is handy for a variety of tasks, such as expressing
 * asynchronous actions in a concise manner, or logging every action payload.
 *
 * See `redux-thunk` package as an example of the Redux middleware.
 *
 * Because middleware is potentially asynchronous, this should be the first
 * store enhancer in the composition chain.
 *
 * Note that each middleware will be given the `dispatch` and `getState` functions
 * as named arguments.
 *
 * @param {...Function} middlewares The middleware chain to be applied.
 * @returns {Function} A store enhancer applying the middleware.
 */

/**
 * Encode the asterisk parameter. Similar to `pretty`, but allows slashes.
 *
 * @param  {string}
 * @return {string}
 */

/**
 * Escape a regular expression string.
 *
 * @param  {string} str
 * @return {string}
 */

/**
 * Escape the capturing group by escaping special characters and meaning.
 *
 * @param  {string} group
 * @return {string}
 */

/**
 * Expose `pathToRegexp`.
 */

/**
 * Expose a function for taking tokens and returning a RegExp.
 *
 * @param  {!Array}          tokens
 * @param  {(Array|Object)=} keys
 * @param  {Object=}         options
 * @return {!RegExp}
 */

/**
 * Expose a method for transforming tokens into the path function.
 */

/**
 * Get the flags for a regexp from the options.
 *
 * @param  {Object} options
 * @return {string}
 */

/**
 * Hook factory, which creates a `useSelector` hook bound to a given context.
 *
 * @param {React.Context} [context=ReactReduxContext] Context passed to your `<Provider>`.
 * @returns {Function} A `useSelector` hook bound to the specified context.
 */

/**
 * Hook factory, which creates a `useStore` hook bound to a given context.
 *
 * @param {React.Context} [context=ReactReduxContext] Context passed to your `<Provider>`.
 * @returns {Function} A `useStore` hook bound to the specified context.
 */

/**
 * Hyphenates a camelcased CSS property name, for example:
 *
 *   > hyphenateStyleName('backgroundColor')
 *   < "background-color"
 *   > hyphenateStyleName('MozTransition')
 *   < "-moz-transition"
 *   > hyphenateStyleName('msTransition')
 *   < "-ms-transition"
 *
 * As Modernizr suggests (http://modernizr.com/docs/#prefixed), an `ms` prefix
 * is converted to `-ms-`.
 *
 * @param {string} string
 * @return {string}
 */

/**
 * It's falsish not falsy because 0 is allowed.
 */

/**
 * Merge anything recursively.
 * Objects get merged, special objects (classes etc.) are re-assigned "as is".
 * Basic types overwrite objects or other basic types.
 *
 * @param {(IConfig | any)} origin
 * @param {...any[]} newComers
 * @returns the result
 */

/**
 * Normalize the given path string, returning a regular expression.
 *
 * An empty array can be passed in for the keys, which will hold the
 * placeholder key descriptions. For example, using `/user/:id`, `keys` will
 * contain `[{ name: 'id', delimiter: '/', optional: false, repeat: false }]`.
 *
 * @param  {(string|RegExp|Array)} path
 * @param  {(Array|Object)=}       keys
 * @param  {Object=}               options
 * @return {!RegExp}
 */

/**
 * Parse a string for the raw tokens.
 *
 * @param  {string}  str
 * @param  {Object=} options
 * @return {!Array}
 */

/**
 * Prettier encoding of URI path segments.
 *
 * @param  {string}
 * @return {string}
 */

/**
 * Prints a warning in the console if it exists.
 *
 * @param {String} message The warning message.
 * @returns {void}
 */

/**
 * Public API for matching a URL pathname to a path.
 */

/**
 * Pull out keys from a regexp.
 *
 * @param  {!RegExp} path
 * @param  {!Array}  keys
 * @return {!RegExp}
 */

/**
 * Puts the scheduler in a `suspended` state and executes a task immediately.
 */

/**
 * Returns the object type of the given payload
 *
 * @param {*} payload
 * @returns {string}
 */

/**
 * Returns true if a given popstate event is an extraneous WebKit event.
 * Accounts for the fact that Chrome on iOS fires real popstate events
 * containing undefined state when pressing the back button.
 */

/**
 * Returns true if the HTML5 history API is supported. Taken from Modernizr.
 *
 * https://github.com/Modernizr/Modernizr/blob/master/LICENSE
 * https://github.com/Modernizr/Modernizr/blob/master/feature-detects/history.js
 * changed to avoid false negatives for Windows Phones: https://github.com/reactjs/react-router/issues/586
 */

/**
 * Returns true whether the payload is null or undefined
 *
 * @param {*} payload
 * @returns {(payload is null | undefined)}
 */

/**
 * Returns whether the payload is a Date, and that the date is valid
 *
 * @param {*} payload
 * @returns {payload is Date}
 */

/**
 * Returns whether the payload is a Symbol
 *
 * @param {*} payload
 * @returns {payload is symbol}
 */

/**
 * Returns whether the payload is a an array with at least 1 item
 *
 * @param {*} payload
 * @returns {payload is any[]}
 */

/**
 * Returns whether the payload is a plain JavaScript object (excluding special classes or objects with other prototypes)
 *
 * @param {*} payload
 * @returns {payload is PlainObject}
 */

/**
 * Returns whether the payload is an array
 *
 * @param {any} payload
 * @returns {payload is any[]}
 */

/**
 * Returns whether the payload is null
 *
 * @param {*} payload
 * @returns {payload is null}
 */

/**
 * Returns whether the payload is undefined
 *
 * @param {*} payload
 * @returns {payload is undefined}
 */

/**
 * TODO: Explore using CSS.escape when it becomes more available
 * in evergreen browsers.
 */

/**
 * The main path matching regexp utility.
 *
 * @type {RegExp}
 */

/**
 * The public API for a <Router> that stores location in memory.
 */

/**
 * The public API for a <Router> that uses window.location.hash.
 */

/**
 * The public API for matching a single path and rendering.
 */

/**
 * The public API for prompting the user before navigating away from a screen.
 */

/**
 * The public API for rendering a history-aware <a>.
 */

/**
 * The public API for rendering the first <Route> that matches.
 */

/**
 * The public top-level API for a "static" <Router>, so-called because it
 * can't actually change the current location. Instead, it just records
 * location changes in a context object. Useful mainly in testing and
 * server-rendering scenarios.
 */

/**
 * These are private action types reserved by Redux.
 * For any unknown actions, you must return the current state.
 * If the current state is undefined, you must return the initial state.
 * Do not reference these action types directly in your code.
 */

/**
 * Transform an array into a regexp.
 *
 * @param  {!Array}  path
 * @param  {Array}   keys
 * @param  {!Object} options
 * @return {!RegExp}
 */

/**
 * Turns an object whose values are action creators, into an object with the
 * same keys, but with every function wrapped into a `dispatch` call so they
 * may be invoked directly. This is just a convenience method, as you can call
 * `store.dispatch(MyActionCreators.doSomething())` yourself just fine.
 *
 * For convenience, you can also pass an action creator as the first argument,
 * and get a dispatch wrapped function in return.
 *
 * @param {Function|Object} actionCreators An object whose values are action
 * creator functions. One handy way to obtain it is to use ES6 `import * as`
 * syntax. You may also pass a single function.
 *
 * @param {Function} dispatch The `dispatch` function available on your Redux
 * store.
 *
 * @returns {Function|Object} The object mimicking the original object, but with
 * every action creator wrapped into the `dispatch` call. If you passed a
 * function as `actionCreators`, the return value will also be a single
 * function.
 */

/**
 * Turns an object whose values are different reducer functions, into a single
 * reducer function. It will call every child reducer, and gather their results
 * into a single state object, whose keys correspond to the keys of the passed
 * reducer functions.
 *
 * @param {Object} reducers An object whose values correspond to different
 * reducer functions that need to be combined into one. One handy way to obtain
 * it is to use ES6 `import * as reducers` syntax. The reducers may never return
 * undefined for any action. Instead, they should return their initial state
 * if the state passed to them was undefined, and the current state for any
 * unrecognized action.
 *
 * @returns {Function} A reducer function that invokes every reducer inside the
 * passed object, and builds a state object with the same shape.
 */

/**
 Used to track a parent task and its forks
 In the fork model, forked tasks are attached by default to their parent
 We model this using the concept of Parent task && main Task
 main task is the main flow of the current Generator, the parent tasks is the
 aggregation of the main tasks + all its forked tasks.
 Thus the whole model represents an execution tree with multiple branches (vs the
 linear execution tree in sequential (non parallel) programming)

 A parent tasks has the following semantics
 - It completes if all its forks either complete or all cancelled
 - If it's cancelled, all forks are cancelled as well
 - It aborts if any uncaught error bubbles up from forks
 - If it completes, the return value is the one returned by the main task
 **/

/** @license React v0.19.1
 * scheduler.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

/** @license React v16.13.1
 * react-is.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

/** @license React v16.14.0
 * react-dom.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

/** @license React v16.14.0
 * react.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

/** @license React v17.0.2
 * react-is.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

/** @type {!Array} */

/** @type {!Object} */

/** @type {string} */

/** Creates a main task to track the main flow */

/************************************************************************/

/******/

/***/

/*eslint-disable no-console*/

//

// 

// "/*"            => ["/", undefined, undefined, undefined, undefined, "*"]

// "/:test(\\d+)?" => ["/", "test", "\d+", undefined, "?", undefined]

// "/route(\\d+)"  => [undefined, undefined, undefined, "\d+", undefined, undefined]

// "consumed" by the delegate iterator. If context.method was

// "return" to "throw", let that override the TypeError below.

// "return", allow the original .return call to continue in the

// $FlowFixMe

// $FlowFixMe: Not typed to avoid destructuring arguments

// .constructor.prototype properties for functions that return Generator

// .throw, and .return (see defineIteratorMethods).

// .throw, and .return methods.

// 0 means "already installed".

// @@iterator function is called on it. Some browsers' implementations of the

// @font-face, @page

// @import

// @see http://browserhacks.com/#hack-e71d8692f65334173fee715c222cb805

// @see https://github.com/webpack-contrib/style-loader/issues/177

// @ts-ignore

// A .throw or .return when the delegate iterator has no .throw

// A Generator should always return itself as the iterator object when the

// A hashchange doesn't always == location change.

// About 1.5x faster than the two-arg version of Array#splice()

// Adapted from convert-source-map (MIT)

// Allow injecting another batching function later

// Any reducers that existed in both the new and old rootReducer

// Assign the result of the finished delegate to the temporary

// AsyncIterator objects; they just return a Promise for the value of

// Avoid calling selector multiple times if the store's state has not changed

// Avoid failures from read-only properties

// Avoid propagating failures to Promises returned by later

// Be forgiving, per 25.3.3.3.3 of the spec:

// By explicitly using `prop-types` you are opting into new production behavior.

// CONCATENATED MODULE: ./node_modules/@babel/runtime/helpers/esm/defineProperty.js

// CONCATENATED MODULE: ./node_modules/@babel/runtime/helpers/esm/inheritsLoose.js

// CONCATENATED MODULE: ./node_modules/@babel/runtime/helpers/esm/objectSpread2.js

// CONCATENATED MODULE: ./node_modules/@babel/runtime/helpers/esm/setPrototypeOf.js

// CONCATENATED MODULE: ./node_modules/@emotion/is-prop-valid/dist/is-prop-valid.browser.esm.js

// CONCATENATED MODULE: ./node_modules/@emotion/memoize/dist/memoize.browser.esm.js

// CONCATENATED MODULE: ./node_modules/@redux-saga/deferred/dist/redux-saga-deferred.esm.js

// CONCATENATED MODULE: ./node_modules/history/esm/history.js

// CONCATENATED MODULE: ./node_modules/is-what/dist/index.esm.js

// CONCATENATED MODULE: ./node_modules/merge-anything/dist/index.esm.js

// CONCATENATED MODULE: ./node_modules/react-redux/es/components/Provider.js

// CONCATENATED MODULE: ./node_modules/react-redux/es/exports.js

// CONCATENATED MODULE: ./node_modules/react-redux/es/hooks/useReduxContext.js

// CONCATENATED MODULE: ./node_modules/react-redux/es/hooks/useSelector.js

// CONCATENATED MODULE: ./node_modules/react-redux/es/hooks/useStore.js

// CONCATENATED MODULE: ./node_modules/react-redux/es/index.js

// CONCATENATED MODULE: ./node_modules/react-redux/es/utils/Subscription.js

// CONCATENATED MODULE: ./node_modules/react-redux/es/utils/batch.js

// CONCATENATED MODULE: ./node_modules/react-redux/es/utils/reactBatchedUpdates.js

// CONCATENATED MODULE: ./node_modules/react-redux/es/utils/useIsomorphicLayoutEffect.js

// CONCATENATED MODULE: ./node_modules/redux-saga/dist/redux-saga-core-npm-proxy.esm.js

// CONCATENATED MODULE: ./node_modules/redux-saga/dist/redux-saga-effects-npm-proxy.esm.js

// CONCATENATED MODULE: ./node_modules/redux/es/redux.js

// CONCATENATED MODULE: ./node_modules/resolve-pathname/esm/resolve-pathname.js

// CONCATENATED MODULE: ./node_modules/value-equal/esm/value-equal.js

// CONCATENATED MODULE: ./src/components/Calculator/components/Settings/ResetHistoryButton/index.jsx

// CONCATENATED MODULE: ./src/components/Calculator/components/Settings/ThemeSelect/index.jsx

// CONCATENATED MODULE: ./src/components/ErrorBoundary/index.jsx

// CONCATENATED MODULE: ./src/constants/actions.js

// CONCATENATED MODULE: ./src/constants/router.js

// CONCATENATED MODULE: ./src/index.js

// CONCATENATED MODULE: ./src/pages/Settings/components.js

// CONCATENATED MODULE: ./src/pages/Settings/index.jsx

// CONCATENATED MODULE: ./src/store/reducers/calculatorReducer.js

// CONCATENATED MODULE: ./src/store/sagas/index.js

// CONCATENATED MODULE: ./src/store/selectors/index.js

// CONCATENATED MODULE: ./src/store/store.js

// CONCATENATED MODULE: ./src/themes/theme.js

// CPS (ie node style functions) can define their own cancellation logic

// CSP to forbid Function, and you're not willing to fix either of those

// Call delegate.iterator[context.method](context.arg) and handle the

// Check if module is in cache

// Combine passed cssRules with previously deferred CSS rules

// Compile all the patterns before compilation.

// Compile all the tokens into regexps.

// Completion callback passed to the appropriate effect runner

// Create a new module (and put it into the cache)

// DCE check should happen before ReactDOM bundle executes so that

// Default to a dummy "batch" implementation that just runs the callback

// Define Generator.prototype.{next,throw,return} in terms of the

// Define the unified helper method that is used to implement .next,

// Definitely a string, and a clone

// Deliberately forget the last sent value so that we don't

// Detect buggy property enumeration order in older V8 versions.

// DevTools can report bad minification during injection.

// DevTools shouldn't crash React, no matter what.

// Dispatch the exception by looping back around to the

// Don't pass through non HTML tags through to HTML elements

// Dummy constructor functions that we use as the .constructor and

// ESM COMPAT FLAG

// EXPORTS

// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/esm/extends.js

// EXTERNAL MODULE: ./node_modules/@redux-saga/delay-p/dist/redux-saga-delay-p.esm.js

// EXTERNAL MODULE: ./node_modules/@redux-saga/symbols/dist/redux-saga-symbols.esm.js

// EXTERNAL MODULE: ./node_modules/react-dom/index.js

// EXTERNAL MODULE: ./node_modules/react-loader-spinner/dist/loader/css/react-spinner-loader.css

// EXTERNAL MODULE: ./node_modules/react-redux/es/index.js + 24 modules

// EXTERNAL MODULE: ./node_modules/react/index.js

// EXTERNAL MODULE: ./node_modules/redux/es/redux.js + 2 modules

// EXTERNAL MODULE: ./node_modules/tiny-invariant/dist/tiny-invariant.esm.js

// Enable batched updates in our subscriptions for use

// Ending with a TASK_CANCEL will propagate the Cancellation to all joiners

// Ensure the hash is encoded properly before doing anything else.

// Ensure we always have a properly-encoded hash.

// Exception thrown outside of any try block that could handle

// Execute the module function

// Exports

// Flag the module as loaded

// For old IE

// For the native GeneratorFunction constructor, the best we can

// Force single-tag solution on IE6-9, which has a hard limit on the # of <style>

// GenStateExecuting and loop back for another invocation.

// Helper for defining the .next, .throw, and .return methods of the

// Helper to call a given function, only once

// IE 11 sometimes throws when accessing window.history.state

// IE 8 has a broken Object.defineProperty that only works on DOM objects.

// If a rejected Promise was yielded, throw the rejection back

// If an exception is thrown from innerFn, we leave state ===

// If context.method was "throw" but the delegate handled the

// If enqueue has been called before, then we want to wait until

// If maybeInvokeDelegate(context) changed context.method from

// If outerFn provided and outerFn.prototype is a Generator, then outerFn.prototype instanceof Generator.

// If the delegate iterator has a return method, give it a

// If the dispatched exception was caught by a catch block,

// If the path exists, push it onto the end.

// If the status is CANCELLED, then we do not need to change it here

// Ignore already escaped sequences.

// Ignore extraneous popstate events in WebKit.

// Ignore the finally entry if control is not jumping to a

// Ignore this change; we already setState in push/replace.

// Important!

// Imports

// In non-strict mode we allow a slash at the end of match. If the path to

// Inlined / shortened version of `kindOf` from https://github.com/jonschlinkert/kind-of

// Inlined version of the `symbol-observable` polyfill

// Instead, we just default to 0 for keys we don't know.

// Instead, we just default to 0 for paths we don't know.

// Iterate over the tokens and create our regexp string.

// Iterator interface in terms of a single ._invoke method.

// JSONP chunk loading for javascript

// Keep this list in sync with production version in `./factoryWithTypeCheckers.js`.

// Load entry module and return exports

// Match Express-style parameters and un-named parameters with a prefix

// Match any characters still remaining.

// Match escaped characters that would otherwise appear in future matches.

// Mimic the behavior of DOM histories by

// Module

// NOTE: We cannot mutate the deferred array itself as all clones

// No need to subscribe a static component to theme changes, it won't change anything

// Not sure about the optimal order of these conditions:

// Note that simple async functions are implemented on top of

// Note: ["return"] must be used for ES3 parsing compatibility.

// Object.prototype.hasOwnProperty.call

// One-arg form: push(location)

// Otherwise, if either of them == null they are not equal.

// Preact uses an empty array as children by

// Prepend partial segment prefixes.

// Promise = chunk loading, 0 = chunk loaded

// Props should take precedence over ThemeProvider, which should take precedence over

// Public interface

// Push the current path onto the tokens.

// Race Auto cancellation

// Rather than returning an object with a next method, we keep

// React 15 compat

// React currently throws a warning when using useLayoutEffect on the server.

// React v16.11 and below

// React v16.12 and above

// Regardless of whether this script is executing as a CommonJS module

// Resetting context._sent for legacy support of Babel's

// Resolve incomplete/relative pathname relative to current location.

// Resume execution at the desired location (see delegateYield).

// Return an iterator with no values.

// Return false from a transition hook to cancel the transition.

// Return the exports of the module

// SVG

// SVG-related properties

// See https://github.com/ReactTraining/history/pull/289

// See https://github.com/facebook/regenerator/issues/274 for more details.

// Setting context._sent for legacy support of Babel's

// Setting status to CANCELLED does not necessarily mean that the task/iterators are stopped

// Shorthands for all valid HTML Elements

// Some versions of I.E. have different rules for clearTimeout vs setTimeout

// Source: https://github.com/garycourt/murmurhash-js/blob/master/murmurhash2_gc.js

// Special case to return head of iframe instead of iframe itself

// TODO: If another transition starts while we're still confirming

// TODO: We could probably make this more reliable by

// TODO: overwrite in-place instead of remove+create?

// Taken from https://github.com/facebook/react/blob/b87aabdfe1b7461e7331abb3601d9e6bb27544bc/packages/react-dom/src/shared/dangerousStyleValue.js

// Test for IE <= 9 as proposed by Browserhacks

// Test for strict equality first.

// Tests for existence of standard globals is to allow style-loader

// Thanks to ReactDOMFactories for this handy list!

// The ._invoke method unifies the implementations of the .next,

// The chunk loading function for additional chunks

// The context.catch method must only be called with a location

// The delegate iterator is finished, so forget it and continue with

// The module cache

// The require function

// The root entry object (effectively a try statement without a catch

// The status here may be RUNNING or CANCELLED

// This action has a similiar effect to ActionTypes.INIT.

// This allows the user to escape special characters that won't transform.

// This environment has a native %IteratorPrototype%; use it instead

// This file contains only the entry chunk.

// This implementation is based heavily on node's url.parse

// This is a bit of a hack. We have to start listening for location

// This is a polyfill for %IteratorPrototype% for environments that

// This is used to make sure we don't warn about the same

// This module should not be running in strict mode, so the above

// This will throw an exception if access to iframe is blocked

// This works if eval is allowed (see CSP)

// This works if the window reference is available

// This works in non-strict mode

// To avoid creating an additional object, we just hang the .value

// To get around it, we can conditionally useEffect on the server (no-op) and

// Try/catch helper to minimize deoptimizations. Returns a completion

// Two-arg form: push(path, state)

// UNUSED EXPORTS: ACTION_PREFIX

// UNUSED EXPORTS: concatArrays, merge

// UNUSED EXPORTS: connectAdvanced, ReactReduxContext, connect, useDispatch, createDispatchHook, createSelectorHook, useStore, createStoreHook, shallowEqual, batch

// UNUSED EXPORTS: parsePath

// Use a negative lookahead to match only capturing groups.

// Verify that the code above has been dead code eliminated (DCE'd).

// We can't use window.location.hash here because it's not

// We cannot tell if a hashchange was caused by a PUSH, so we'd

// We cannot tell if a hashchange was caused by a REPLACE, so we'd

// We don't expect any of the above to throw, but better to be safe.

// We get TERMINATE flag, i.e. by taking from a channel that ended using `take` (and not `takem` used to trap End of channels)

// We return undefined, instead of nothing here, so it's

// We should still report in case we break this code.

// We use React.Children.forEach instead of React.Children.toArray().find()

// When a store is created, an "INIT" action is dispatched so that every

// When a yielded Promise is resolved, its final value becomes

// When newVal is an object do the merge recursively

// When there is no prior location and pathname is empty, set it to /

// When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally

// When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally

// Within the body of any async function, `await x` is transformed to

// __webpack_public_path__

// `hasOwn.call(value, "__await")` to determine if the yielded value is

// `undefined` instead of `null` to make default parameter work

// `yield regeneratorRuntime.awrap(x)`, so that the runtime can test

// a Promise means "currently loading".

// accidentally pass it on to the delegate.

// all SC-specific things should not be hoisted

// all previous Promises have been resolved before calling invoke,

// already have an existing method we want to call, so there's no need

// also ensures that the minifier will not anonymize the function.

// ancestor components re-render before descendants

// and .done properties off the next function object itself. This

// and optional suffixes. Matches appear as:

// and shouldn't be increasing the number of class names

// any necessary setup in a predictable way. This predictability

// anything else returned as is

// argument that corresponds to a known catch block.

// assignment should always work unless something is misconfigured. Just

// async functions in terms of async generators, it is especially

// at-rule

// available, otherwise a store update may happen between render and the effect,

// avoid mem leaks in IE.

// best way to handle this.

// but since JS is single=threaded, we can rely on that to ensure

// by setting cancel field on the cb

// cached from whatever global is present so that test runners that stub it

// call invoke immediately, without waiting on a callback to fire,

// catch synchronous failures; see #152

// catch synchronous failures; see #152 and #441

// causing a render after a cancelled POP.

// chance to clean up.

// changed

// changes here in the constructor in case there are any <Redirect>s

// component at different URLs.

// consistent across browsers - Firefox will pre-decode it!

// context.dispatchException(context.arg) call above.

// context.method was "next", forget context.arg since it has been

// create a fake namespace object

// create error before stack unwound to get useful stacktrace later

// css base code, injected by the css-loader

// current iteration.

// default, so use null if that's the case.

// defaultProps, but React automatically puts defaultProps on props.

// defensive measure

// define __esModule on exports

// define getter function for harmony exports

// define newObject to merge all values upon

// delegate iterator, or by modifying context.method and context.arg,

// do is to check its .name property.

// do not bubble up synchronous failures for detached forks

// do the same (see clones[i].inject)

// don't break things.  But we need to wrap it in a try catch in case it is

// don't hoist over string (html) components

// don't natively support it.

// due to cross-origin restrictions

// easier to handle this case. if(!global) { ...}

// effects in the iterator's finally block will still be executed

// empty string to avoid regexp issues

// encapsulates the subscription logic for connecting a component to the redux store, as

// enqueue has not been called before, then it is important to

// ensure latest selected state is reused so that a custom equality function can result in identical references

// eslint-disable-line no-alert

// eslint-disable-line no-new-wrappers

// eslint-disable-next-line func-names

// eslint-disable-next-line guard-for-in

// eslint-disable-next-line guard-for-in, no-restricted-syntax

// eslint-disable-next-line no-param-reassign

// eslint-disable-next-line no-plusplus

// eslint-disable-next-line prefer-destructuring

// eslint-disable-next-line react/no-danger

// exception, let the outer generator proceed normally. If

// execute code before the first await. Since we implement simple

// executor callback, and why async functions synchronously

// expose the module cache

// expose the modules object (__webpack_modules__)

// extend merge rules

// fold the underlying StyledComponent rules up (implicit extend)

// fold the underlying StyledComponent target up since we folded the styles

// function because try/catches deoptimize in certain engines.

// function.sent implementation.

// functions are allowed to be static if they're just being

// g can still be undefined, but nothing to do about it...

// get a new location before the <Router> is mounted.

// getDefaultExport function for compatibility with non-harmony modules

// has a stable shape and so hopefully should be cheap to allocate.

// have been (and was previously) designed to take a closure to be

// here because toArray adds keys to all child elements and we do not want

// hit reducers

// http://fb.me/prop-types-in-prod

// https://bugs.chromium.org/p/v8/issues/detail?id=3056

// https://bugs.chromium.org/p/v8/issues/detail?id=4118

// https://github.com/amilajack/eslint-plugin-flowtype-errors/issues/133

// https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume

// i.e. a generator function returns an iterator

// if a Content Security Policy forbids using Function, but in that case

// if clearTimeout wasn't available but was latter defined

// if setTimeout wasn't available but was latter defined

// ignore everything but left clicks

// import a list of modules into the list

// important to get this right, even though it requires care.

// in case runtime.js accidentally runs in strict mode, in modern engines

// in every case, so we don't have to touch the arguments object. The

// in non-ending mode, where "/test/" shouldn't match "/test//route".

// injected easily by `bin/regenerator --include-runtime script.js`.

// install a JSONP callback for chunk loading

// instead create a failed task. See #152 and #441

// into the async generator function so it can be handled there.

// invocations of the iterator.

// invoked without arguments, but in all the cases we care about we

// is created synchronously, otherwise a store update may occur before the

// is re-rendered, the selectors are called again, and

// is that other hash histories in the page will consider it a POP.

// is valid at the end of a path match, not in the middle. This is important

// is why the Promise constructor synchronously invokes its

// istanbul ignore if

// istanbul ignore next

// it, so set the completion value of the entire function to

// iterator prototype chain incorrectly implement this, causing the Generator

// keeping a list of keys we've seen in sessionStorage.

// keeping a list of paths we've seen in sessionStorage.

// keys multiple times.

// kicks up the generator

// location outside the try/catch block.

// locations where there is no enclosing try statement.

// match already ends with a slash, we remove it for consistency. The slash

// meant to be awaited.

// method always terminates the yield* loop.

// minifier not to mangle the names of these two functions.

// mode & 1: value is a module id, require it

// mode & 2: merge all properties of value into the ns

// mode & 4: return value when already ns object

// mode & 8|1: behave like require

// monitors are expected to have a certain interface, let's fill-in any missing ones

// no consecutive self refs (.b.b); that is a precedence boost and treated differently

// object to not be returned from this call. This ensures that doesn't happen.

// object to store loaded and loading chunks

// objects. For full spec compliance, you may wish to configure your

// of the polyfill.

// on error function for async loading

// on the initial render. If there are, they will replace/push when

// onClick prevented default

// only additional allocation required is the completion record, which

// or a finally block) gives us a place to store values thrown from

// or not, return the runtime object so that we can declare the variable

// outer generator.

// place our cache into shared context so it'll persist between HMRs

// prettier-ignore

// prevents cancelling an already completed effect

// prevents unnecessary cancellation

// problems, please detail your unique predicament in a GitHub issue.

// propagates cancel downward

// property

// rather setState here and ignore the hashchange. The caveat here

// re-define the origin and newComer as targetVal and newVal

// record like context.tryEntries[i].completion. This interface could

// recursive case

// reducer returns their initial state. This effectively populates

// regeneratorRuntime in the outer scope, which allows this module to be

// resolve iterator

// result, either by returning a { value, done } result from the

// return the list of modules as css string

// same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error

// same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.

// script path function

// selector

// setting context.delegate to null, and returning the ContinueSentinel.

// setup Promise in chunk cache

// setup cancellation logic on the parent cb

// shim for using process in browser

// so that results are always delivered in the correct order. If

// so that the async generator function has the opportunity to do

// start chunk loading

// statically styled-components don't need to build an execution context object,

// strict mode using a global Function call. This could conceivably fail

// stylis has no concept of state to be passed to plugins

// subscription callback always has the selector from the latest render commit

// subscription is created and an inconsistent state may be observed

// tags it will allow on a page

// the .value of the Promise<{value,done}> result for the

// the final result produced by the iterator.

// the first self-ref is always untouched

// the initial state tree.

// the matched portion of the URL

// the method takes exactly one argument, since that happens to be true

// the new state tree with any relevant data from the old one.

// the outer generator.

// the path used to match

// the previous one, we may end up in a weird state. Figure out the

// the proper solution is to fix the accidental strict mode problem. If

// then let that catch block handle the exception normally.

// then return the task descriptor to the caller

// there can be only a single saga error created at any given moment

// there should be at least two self-refs to do a replacement (.b > .b)

// these properties stay in sync with the current stylis run

// they mount and since cDM fires in children before parents, we may

// things simple and return the next function itself.

// this match getFnCallDescriptor logic

// throw the exception.

// to create a new function object. We can even get away with assuming

// to is absolute

// to is relative, drop the filename

// to operate correctly into non-standard environments

// to trigger an unmount/remount for two <Route>s that render the same

// tracks down the current cancel

// undefined = chunk not loaded, null = chunk preloaded/prefetched

// unified ._invoke helper method.

// useLayoutEffect in the browser. We need useLayoutEffect to ensure the store

// used to get the classname of a nested styled component

// user handled the error, we can clear bookkept values

// v8 likes predictible objects

// variable specified by delegate.resultName (see delegateYield).

// we can explicitly access globalThis. In older engines we can escape

// we ignore all errors here, since when the component

// we know that it won't be needed anymore and we need to clear it

// we've dumped the saga stack to string and are passing it to user's code

// webpackBootstrap

// well as nesting subscriptions of descendant components, so that we can ensure the

// when when somebody has screwed with setTimeout but no I.E. maddness

// whether or not we matched exactly

// which may cause missed updates; we also must ensure the store subscription

// will receive the previous state. This effectively populates

// will throw again, if neither props nor store state

// with standard React renderers (ReactDOM, React Native)

// work directly on newComer if its not an object

// wrapped in strict mode code which doesn't define any globals.  It's inside a

// you've misconfigured your bundler to force strict mode and applied a

//# sourceMappingURL=stylis.min.js.map

//normal enviroments in sane situations
